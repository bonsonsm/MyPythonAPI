# -*- coding: utf-8 -*-

import pandas as pd
import nltk

import networkx as nx
import pylab
import matplotlib.pyplot as plt

class GraphSimilarity:
    graph_window = 1
    
    def preprocessing(self,full_path, sheet_name, header):
        print("### Pre Processing ### - Start")
        pd_preprocess_df = pd.read_excel(full_path, sheet_name, header)
        print("Total Records:",len(pd_preprocess_df.index))
        print("### Pre Processing ### - End")
        return pd_preprocess_df
    
    def createGraph(self, df_data):
        sentence = ""
        for index, row in df_data.iterrows():
            sentence = row[1]
            break
        tokens = nltk.word_tokenize(sentence)
        print(tokens)
        DG=nx.DiGraph()
        for i in range(len(tokens)):
            
            print("******",i)
            #print(tokens[i])
            if i == 0:
                continue
            DG.add_edges_from([(tokens[i-1], tokens[i])], weight=1)
            #DG.add_edge(tokens[i-1], tokens[i])
            #DG.add_edges_from([('A', 'B'),('C','D'),('G','D')], weight=1)
            
            print(DG.nodes())
            #if i ==3:
            #    break
        print(list(DG.nodes()))
        print(list(DG.edges()))
        self.drawGraph(DG)
        
        
    def drawGraph(self, DG):
        node_labels = {node:node for node in DG.nodes()}
        
        
        val_map = {'FIRST': 1.0,'NORMAL': 0.5714285714285714,'LAST': 0.0}
        values = [val_map.get(node, 1.0) for node in DG.nodes()]
                  
        edge_labels=dict([((u,v,),d['weight']) for u,v,d in DG.edges(data=True)])
        #edge_colors = ['black' if not edge in red_edges else 'red' for edge in G.edges()]
        edge_colors = ['black' for edge in DG.edges()]
        pos=nx.spring_layout(DG)
        nx.draw_networkx_labels(DG, pos, labels=node_labels)
        nx.draw_networkx_edge_labels(DG,pos,edge_labels=edge_labels)
        #nx.draw(DG,pos, node_color = values, node_size=1500,edge_color=edge_colors,edge_cmap=plt.cm.Reds)
        nx.draw(DG,pos, node_size=1500,edge_color=edge_colors,edge_cmap=plt.cm.Reds)
        pylab.show()
                              
        nx.draw(DG)
    
    def run1(self, full_path, sheet_name, header):
        print("### Run 1 ### - Start")
        df_data = self.preprocessing(full_path, sheet_name, header)
        self.createGraph(df_data)
        print("### Run 1 ### - End")


        
def main():
    obj_graph_similaritry = GraphSimilarity()
    directory = "data\\"
    filename ="MoviewReview_RottenTomatoes_Train.xlsx"
    full_path=directory + filename
    sheet_name="train"
    header=0
    obj_graph_similaritry.run1(full_path, sheet_name, header)
    
    
if __name__ == '__main__':
    main()
